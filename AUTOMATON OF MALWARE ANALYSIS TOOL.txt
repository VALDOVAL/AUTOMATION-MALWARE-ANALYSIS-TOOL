#-------------------By Valery N---------------~
import requests
import json
import os
import click
import jinja2
import logging
import shutil
import subprocess
import signal
import sys
#import cuckooAPI
from tkinter import *
from tkinter import filedialog
import tkinter as tk
from tkinter import ttk
import requests
from tkinter.messagebox import *

LARGE_FONT = ('Verdana', 12)
XLARGE_FONT = ('Verdana', 16)

# ************* App Set-Up ************ #
class VirusAnalyser(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)
        tk.Tk.wm_title(self, 'Automation Malware Analysing Tool')
        tk.Tk.iconbitmap(self,)
        container.pack(side='top', fill='both', expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        self.current_tool = ""

        self.frames = {}
        for F in (MenuPage, VirusTotalTool, VirusTotalFileAnalysis, VirusTotalUrlAnalysis, CuckooSandBox, CuckooFileAnalysis, CuckooUrlAnalysis):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky='nsew')

        self.show_frame(MenuPage)

    # Display frames
    def show_frame(self, controller):
        frame = self.frames[controller]
        frame.tkraise()

    # Exit System
    def quitting(self, controller):
        sys.exit()

# ******************** Main Menu ****************************#
class MenuPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        tk.Frame.configure(self, bg='lightgray')
        label = tk.Label(self, text="WELCOME TO THE MAIN MENU", bg='lightgray', font=XLARGE_FONT)
        label.pack(pady=20, padx=10)

        frame1 = tk.Frame(self, bg='lightgray')
        self.btn1 = Button(frame1, text="Virus Total", width=25, bg='gray', command=lambda: controller.show_frame(VirusTotalTool))
        self.btn1.pack(side='left', fill=X, padx=15, pady=25)
        self.btn2 = Button(frame1, text="Cuckoo SandBox", width=25, bg='gray', command=lambda: controller.show_frame(CuckooSandBox))
        self.btn2.pack(side='left', fill=X, padx=15, pady=25)
        frame1.pack()

        frame2 = tk.Frame(self)
        self.btn_quit = Button(frame2, text="Quit", width=25, bg='red', command=lambda: controller.quitting(MenuPage))
        self.btn_quit.pack(side='left', fill=X)
        frame2.pack()

class VirusTotalTool(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        tk.Frame.configure(self, bg='lightgray')
        label = tk.Label(self, text="VIRUS TOTAL STATIC ANALYSIS", bg='lightgray', font=XLARGE_FONT)
        label.pack(pady=20, padx=10)

        frame1 = tk.Frame(self, bg='lightgray')
        self.btn1 = Button(frame1, text="File Analysis", width=20, bg='gray', command=lambda: controller.show_frame(VirusTotalFileAnalysis))
        self.btn1.pack(side='left', fill=X, padx=10, pady=25)
        self.btn2 = Button(frame1, text="URL Analysis", width=20, bg='gray', command=lambda: controller.show_frame(VirusTotalUrlAnalysis))
        self.btn2.pack(side='left', fill=X, padx=10, pady=25)
        frame1.pack()

        frame2 = tk.Frame(self)
        self.cancel = Button(frame2, text="Cancel", width=20, command=lambda: controller.show_frame(MenuPage))
        self.cancel.pack(side='left', fill=X)
        self.btn_quit = Button(frame2, text="Quit", width=20, bg='red', command=lambda: controller.quitting(MenuPage))
        self.btn_quit.pack()
        frame2.pack()


class VirusTotalFileAnalysis(tk.Frame):
    def __init__(self, parent, controller):
        self.controller = controller
        tk.Frame.__init__(self, parent)
        tk.Frame.configure(self, bg='lightgray')
        label1 = tk.Label(self, text="VirusTotal File Analysis", bg='lightgray', font=XLARGE_FONT)
        label1.pack(pady=10, padx=10)

        frame1 = tk.Frame(self, bg='lightgray')
        frame1.pack()
        btn_chooseFile = tk.Button(frame1, text="Choose file", width=20, bg='lightgray', command=lambda: choose_file())
        btn_chooseFile.pack(side='left', fill=X, padx=10, pady=25)
        self.label2 = tk.Label(frame1, text="", width=75, state=DISABLED, bd=2, relief='sunken')
        self.label2.pack(side='left', fill=X)
        btn_scan = tk.Button(frame1, text="Scan", bg='gray', command=lambda: send_file())
        btn_scan.pack(side='left', fill=X)

        frame2 = tk.Frame(self, bg='lightgray')
        frame2.pack()
        btn_back = Button(frame2, text="<--Menu", width=20, bg='gray', command=lambda: main_menu())
        btn_back.pack(side='left', fill=X, padx=5, pady=5)
        btn_fward = Button(frame2, text="Url Analysis-->", width=20, bg='gray', command=lambda: url_analysis())
        btn_fward.pack(side='left', fill=X, padx=5, pady=5)
        btn_report = Button(frame2, text="Get Report", width=20, state=tk.DISABLED,
                            command=lambda: get_resource())
        btn_report.pack(side='left', fill=X, padx=5, pady=5)
        btn_quit = Button(frame2, text="Quit", width=20, bg='red', command=lambda: self.quit())
        btn_quit.pack(side='left', fill=X, padx=5, pady=5)

        def main_menu():
            controller.show_frame(MenuPage)

        def url_analysis():
            controller.show_frame(VirusTotalUrlAnalysis)

        def choose_file():
            filename = filedialog.askopenfilename()
            self.label2['text'] = filename

        def send_file():
            path = self.label2['text']
            if (path == ""):
                showerror('Error!', 'You have not chosen a file')
            else:
                scan_file(path)

        def scan_file(path):
            url = 'https://www.virustotal.com/vtapi/v2/file/scan'
            params = {'apikey': '1d8b20a5c85dc576afb98fa83b91951199c8e72e7eec0c144d310cc2426bfc42'}
            files = {'file': ('myfile', open(path, 'rb'))}

            response = requests.post(url, files=files, params=params)
            res_dict = response.json()
            global resp
            resp = res_dict

            self.label2['text'] = ""
            btn_report["state"] = tk.NORMAL
            self.lbl_txt = tk.Label(frame2, text='', bg='lightgray')
            self.lbl_txt.pack()
            info_board_frame = Frame(self, bg='lightgray')
            info_board_frame.pack(fill=BOTH, padx=10, expand=1)
            frame = tk.Frame(info_board_frame, bg='lightgray')
            frame.pack()
            lbl1 = tk.Label(frame, text='FILE SCAN REPORT STAT:', bg='lightgray', font=LARGE_FONT)
            lbl1.pack(side='left', fill=X, pady=10, padx=5)
            self. lbl2 = tk.Label(frame, text='', bg='lightgray', font=LARGE_FONT)
            self.lbl2.pack(side='left', fill=X, pady=10, padx=5)
            self.lbl2.configure(fg='green')

            self.yscrollbar = Scrollbar(info_board_frame)
            self.yscrollbar.pack(side=RIGHT, fill=Y)

            self.lbox = Listbox(info_board_frame, height=18, bd=2, relief='sunken')
            self.lbox.pack(fill='x', padx=15, pady=15, expand=False)

            self.lbox.config(yscrollcommand=self.yscrollbar.set)
            self.yscrollbar.config(command=self.lbox.yview)

            self.lbox.insert(END, '  Resource: ' + res_dict["resource"])
            self.lbox.insert(END, "  Verbose Msg: " + res_dict["verbose_msg"])
            self.lbox.insert(END, '-----------------------------------------------------------------------------------')

        def get_resource():
            resource = resp['resource']
            get_report(resource)

        def get_report(resource):
            url = 'https://www.virustotal.com/vtapi/v2/file/report'
            params = {'apikey': '1d8b20a5c85dc576afb98fa83b91951199c8e72e7eec0c144d310cc2426bfc42', 'resource': resource}
            response = requests.get(url, params=params)
            res_dict = response.json()

            self.lbox.delete(0, tk.END)
            self.lbox.insert(END, ' Scan Date: ' + res_dict["scan_date"])
            self.lbox.insert(END, '  Id: ' + res_dict["scan_id"])
            self.lbox.insert(END, '  Sha1: ' + res_dict["sha1"])
            self.lbox.insert(END, '  Resource: ' + res_dict["resource"])
            #self.lbox.insert(END, '  Response Code: ' + res_dict["response_code"])
            self.lbox.insert(END, '  Sha256: ' + res_dict["sha256"])
            self.lbox.insert(END, '  Permalink: ' + res_dict["permalink"])
            self.lbox.insert(END, '  md5: ' + res_dict["md5"])
            self.lbox.insert(END, " ------------------------------------------------------------")

            count = 0
            for key, value in res_dict['scans'].items():
                #self.lbox.insert(END, key, value)
                if(value['detected']):
                    self.lbox.insert(END, key, value)
                    self.lbl2.configure(fg='red')
                    count += 1

            if(count > 0):
                if(count == 1):
                    self.lbl2['text'] = "This File contains Malware"
                else:
                    self.lbl2['text'] = "This file contains Malwares"
            else:
                self.lbl2['text'] = "The file is clean"


class VirusTotalUrlAnalysis(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        tk.Frame.configure(self, bg='lightgray')
        label = tk.Label(self, text="VirusTotal URL Analysis", bg='lightgray', font=XLARGE_FONT)
        label.pack(pady=20, padx=10)

        frame1 = tk.Frame(self, bg='lightgray')
        frame1.pack()
        label = tk.Label(frame1, text="Enter url", width=20, bg='lightgray')
        label.pack(side='left', fill=X, padx=10, pady=25)
        self.entry = tk.Entry(frame1, width=100, name="url_entry")
        self.entry.pack(side='left', fill=X, pady=25)
        btn_scan = tk.Button(frame1, text="Scan", bg='gray', command=lambda: get_url())
        btn_scan.pack(side='left', fill=X)

        frame2 = tk.Frame(self, bg='lightgray')
        frame2.pack()
        button1 = tk.Button(frame2, text="<--File Analysis", width=20, bg='gray', command=lambda: controller.show_frame(VirusTotalFileAnalysis))
        button1.pack(side='left', fill=X, padx=5, pady=5)
        button2 = tk.Button(frame2, text="Menu-->", width=20, bg='gray', command=lambda: controller.show_frame(MenuPage))
        button2.pack(side='left', fill=X, padx=5, pady=5)
        btn_report = Button(frame2, text="Get Report", width=20, state=tk.DISABLED,
                            command=lambda: get_urlResource())
        btn_report.pack(side='left', fill=X, padx=5, pady=5)
        self.btn_quit = Button(frame2, text="Quit", width=20, bg='red', command=lambda: controller.quitting(MenuPage))
        self.btn_quit.pack(side='left', fill=X, padx=5, pady=5)

        def get_url():
            path = self.entry.get()
            if(path == ""):
                showerror('Error!', 'You have not entered a url')
            else:
                upload_url(path)

            self.entry["state"] = DISABLED

        def upload_url(path):
            url = 'https://www.virustotal.com/vtapi/v2/url/scan'
            params = {'apikey': '1d8b20a5c85dc576afb98fa83b91951199c8e72e7eec0c144d310cc2426bfc42', 'url': path}

            response = requests.post(url, data=params)
            res_dict = response.json()
            global url_resp
            url_resp = res_dict
            self.entry.delete(0, END)

            btn_report["state"] = tk.NORMAL
            self.lbl_txt = tk.Label(frame2, text='', bg='lightgray')
            self.lbl_txt.pack()
            info_board_frame = Frame(self, bg='lightgray')
            info_board_frame.pack(fill=BOTH, padx=10, expand=1)
            frame = tk.Frame(info_board_frame, bg='lightgray')
            frame.pack()
            lbl1 = tk.Label(frame, text='URL SCAN REPORT STAT:', bg='lightgray', font=LARGE_FONT)
            lbl1.pack(side='left', fill=X, pady=10, padx=5)
            self.lbl2 = tk.Label(frame, text='', bg='lightgray', font=LARGE_FONT)
            self.lbl2.pack(side='left', fill=X, pady=10, padx=5)
            self.lbl2.configure(fg='green')

            self.yscrollbar = Scrollbar(info_board_frame)
            self.yscrollbar.pack(side=RIGHT, fill=Y)

            self.lbox = Listbox(info_board_frame, height=18, bd=2, relief='sunken')
            self.lbox.pack(fill='x', padx=15, pady=15, expand=False)

            self.lbox.config(yscrollcommand=self.yscrollbar.set)
            self.yscrollbar.config(command=self.lbox.yview)

            self.lbox.delete(0, tk.END)
            self.lbox.insert(END, '  Resource: ' + res_dict["resource"])
            self.lbox.insert(END, '  Verbose Msg: ' + res_dict["verbose_msg"])
            self.lbox.insert(END, '------------------------------------------------------------------------------\n\n')

        def get_urlResource():
            resource = url_resp['resource']
            get_url_report(resource)
            btn_report["state"] = tk.DISABLED

        def get_url_report(resource):
            url = 'https://www.virustotal.com/vtapi/v2/url/report'
            params = {'apikey': '1d8b20a5c85dc576afb98fa83b91951199c8e72e7eec0c144d310cc2426bfc42', 'resource': resource}
            response = requests.get(url, params=params)
            res_dict = response.json()

            self.lbox.delete(0, tk.END)
            self.lbox.insert(END, '  Scan Date: ' + res_dict["scan_date"])
            self.lbox.insert(END, '  Id: ' + res_dict["scan_id"])
            self.lbox.insert(END, '  Resource: ' + res_dict["resource"])
            #self.lbox.insert(END, '  Response Code: ' + res_dict["response_code"])
            self.lbox.insert(END, '  Permalink: ' + res_dict["permalink"])
            #self.lbox.insert(END, '  Engines: ' + res_dict ["total"])
            #self.lbox.insert(END, '  Detection: ' + res_dict["positives"])
            self.lbox.insert(END, '--------------------------------------------------------------------\n\n')

            count = 0
            for key, value in res_dict['scans'].items():
                #self.lbox.insert(END, key, value)
                if (value['detected'] == "True"):
                    self.lbox.insert(END, key, value)
                    lbl2.configure(fg='red')
                    count += 1

                else:
                    self.lbox.insert(END, "!OH MALWARE WAS DETECTED")

            if (count > 0):
                if (count == 1):
                    self.lbl2['text'] = "This Site contains Malware"
                else:
                    self.lbl2['text'] = "This Site contains Malwares"
            else:
                self.lbl2['text'] = "No Malware Detected"
#*********************End of VirusTotal**********************************#

